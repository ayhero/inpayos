name: AWS Prod Deployment
env:
  IMG_NAME: inpayos-api
  IMG_VERSION: 1.0.0
  REGISTRY: ghcr.io/ayhero
  # AWS 服务器配置
  AWS_REGION: ap-southeast-1
  AWS_INTERNAL_IP: 174.31.5.227
  AWS_INSTANCE_IP: 14.257.191.134  
  SERVICE_NAME: inpayos-api
  OPENAPI_PORT: 8080
  CASHIER_API_PORT: 8081
  MERCHANT_API_PORT: 8082
  CASHIER_ADMIN_API_PORT: 8083
  ADMIN_API_PORT: 8084
  # 公共临时目录配置
  TEMP_BASE_DIR: /tmp/inpayos-deployments
  APP_TEMP_DIR: ${{ github.event.repository.name }}
  # 日志目录配置 (持久化目录)
  LOGS_DIR: /home/ubuntu/logs

on:
  push:
    branches:
      - mainx  # 只在 main 分支推送时触发

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: PROD
    permissions:
      contents: read
      packages: write  # 允许推送和拉取镜像

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🏗️ 设置 Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: 🔐 登录到 GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔧 构建并推送 Docker 镜像
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMG_NAME }}:${{ env.IMG_VERSION }}
          ${{ env.REGISTRY }}/${{ env.IMG_NAME }}:prod-latest
      id: build

    - name: ✅ 构建完成通知
      run: |
        echo "🎉 镜像构建并推送成功!"
        echo "📦 镜像标签: ${{ env.REGISTRY }}/${{ env.IMG_NAME }}:${{ env.IMG_VERSION }}"
        echo "📦 镜像标签: ${{ env.REGISTRY }}/${{ env.IMG_NAME }}:prod-latest"
        echo "🔗 镜像大小: ${{ steps.build.outputs.imageid }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: PROD

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔑 安装 SSH 密钥
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.AWS_PRIVATE_KEY }}

    - name: 🔒 添加 EC2 到已知主机
      run: |
        echo "🔐 配置 SSH 连接..."
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
        echo "✅ SSH 配置完成"

    - name: 🌐 验证服务器连接
      run: |
        echo "🔍 验证与 AWS EC2 生产服务器的连接..."
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "echo '✅ 生产服务器连接成功' && whoami && uname -a"
        echo "🏁 生产服务器信息获取完成"

    - name: 🔧 检测并安装 AWS CLI
      run: |
        echo "🔧 检测并安装 AWS CLI..."
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "
          # 检查 AWS CLI 是否已安装
          if command -v aws >/dev/null 2>&1; then
            echo '✅ AWS CLI 已安装'
            aws --version
          else
            echo '⚠️ AWS CLI 未安装，开始自动安装...'
            
            # 检查并安装 unzip（如果需要）
            if ! command -v unzip >/dev/null 2>&1; then
              echo '📦 安装 unzip...'
              sudo apt update && sudo apt install -y unzip
              echo '✅ unzip 安装完成'
            fi
            
            # 下载并安装 AWS CLI v2
            echo '⬇️ 下载 AWS CLI v2...'
            cd /tmp
            curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'
            
            echo '📦 解压 AWS CLI...'
            unzip -q awscliv2.zip
            
            echo '🔧 安装 AWS CLI...'
            sudo ./aws/install
            
            echo '🧹 清理安装文件...'
            rm -rf aws awscliv2.zip
            
            # 验证安装
            if command -v aws >/dev/null 2>&1; then
              echo '✅ AWS CLI 安装成功'
              aws --version
            else
              echo '❌ AWS CLI 安装失败'
              exit 1
            fi
          fi
          
          # 验证 AWS 配置和权限
          echo '🔐 验证 AWS 配置和权限...'
          if aws sts get-caller-identity >/dev/null 2>&1; then
            echo '✅ AWS 认证配置正常'
            aws sts get-caller-identity
          else
            echo '⚠️ AWS 认证配置可能有问题，但继续部署过程'
          fi
        "

    - name: 🧹 清理远程临时目录
      run: |
        echo "🧹 清理远程生产服务器临时目录..."
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "
          sudo rm -rf ${{ env.TEMP_BASE_DIR }}/${{ env.APP_TEMP_DIR }}
          echo '✅ 旧临时目录已清理'
        "

    - name: 📁 创建远程目录结构
      run: |
        echo "📁 在远程生产服务器创建目录结构..."
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "
          sudo mkdir -p ${{ env.TEMP_BASE_DIR }}/${{ env.APP_TEMP_DIR }}
          sudo mkdir -p ${{ env.LOGS_DIR }}/${{ env.APP_TEMP_DIR }}
          sudo chown ubuntu:ubuntu ${{ env.TEMP_BASE_DIR }}/${{ env.APP_TEMP_DIR }}
          sudo chown -R 1001:1001 ${{ env.LOGS_DIR }}/${{ env.APP_TEMP_DIR }}
          sudo chmod 755 ${{ env.TEMP_BASE_DIR }}/${{ env.APP_TEMP_DIR }}
          sudo chmod -R 755 ${{ env.LOGS_DIR }}/${{ env.APP_TEMP_DIR }}
          echo '✅ 目录结构创建完成'
          ls -la ${{ env.TEMP_BASE_DIR }}/
          ls -la ${{ env.LOGS_DIR }}/
        "

    - name: 🔐 配置远程服务器 Docker 认证
      run: |
        echo "🔐 在生产 EC2 上登录到 GitHub Container Registry..."
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "
          echo '${{ secrets.GITHUB_TOKEN }}' | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo '✅ Docker 认证配置完成'
        "

    - name: 🧹 清理潜在的端口冲突
      run: |
        echo "🧹 检查并清理潜在的端口冲突..."
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "
          echo '🔍 检查当前端口占用情况:'
          sudo netstat -tlnp | grep -E ':(${{ env.OPENAPI_PORT }}|${{ env.CASHIER_API_PORT }}|${{ env.MERCHANT_API_PORT }}|${{ env.CASHIER_ADMIN_API_PORT }}|${{ env.ADMIN_API_PORT }})' || echo '目标端口当前未被占用'
          
          echo '📋 检查所有与项目相关的容器:'
          sudo docker ps -a --filter name=${{ env.SERVICE_NAME }} --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' || echo '没有找到相关容器'
          
          echo '🧹 清理任何可能的残留容器:'
          sudo docker ps -a -q --filter name=${{ env.SERVICE_NAME }} | xargs -r sudo docker rm -f || echo '没有容器需要清理'
          
          echo '✅ 端口冲突检查完成'
        "

    - name: 🧹 清理 Docker 资源
      run: |
        echo "🧹 清理远程生产服务器 Docker 资源..."
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "
          # 显示清理前的资源使用情况
          echo '📊 清理前的 Docker 资源:'
          sudo docker system df || true
          
          # 显示当前运行的容器
          echo '📋 当前运行的容器:'
          sudo docker ps -a
          
          # 停止并删除现有容器（强制删除）
          echo '🛑 停止现有容器...'
          sudo docker stop ${{ env.SERVICE_NAME }} 2>/dev/null || echo '没有运行中的容器需要停止'
          sudo docker rm -f ${{ env.SERVICE_NAME }} 2>/dev/null || echo '没有容器需要删除'
          
          # 检查端口占用情况
          echo '🔍 检查端口占用情况:'
          sudo netstat -tlnp | grep -E ':(${{ env.OPENAPI_PORT }}|${{ env.CASHIER_API_PORT }}|${{ env.MERCHANT_API_PORT }}|${{ env.CASHIER_ADMIN_API_PORT }}|${{ env.ADMIN_API_PORT }})' || echo '目标端口未被占用'
          
          # 强制杀死占用端口的进程（如果有）
          echo '🔫 清理端口占用进程...'
          sudo fuser -k ${{ env.OPENAPI_PORT }}/tcp 2>/dev/null || echo 'OpenAPI端口无进程占用'
          sudo fuser -k ${{ env.CASHIER_API_PORT }}/tcp 2>/dev/null || echo 'CashierAPI端口无进程占用'
          sudo fuser -k ${{ env.MERCHANT_API_PORT }}/tcp 2>/dev/null || echo 'MerchantAPI端口无进程占用'
          sudo fuser -k ${{ env.CASHIER_ADMIN_API_PORT }}/tcp 2>/dev/null || echo 'CashierAdminAPI端口无进程占用'
          sudo fuser -k ${{ env.ADMIN_API_PORT }}/tcp 2>/dev/null || echo 'AdminAPI端口无进程占用'
          
          # 等待端口释放
          echo '⏳ 等待端口释放...'
          sleep 3
          
          # 再次检查端口状态
          echo '🔍 再次检查端口状态:'
          sudo netstat -tlnp | grep -E ':(${{ env.OPENAPI_PORT }}|${{ env.CASHIER_API_PORT }}|${{ env.MERCHANT_API_PORT }}|${{ env.CASHIER_ADMIN_API_PORT }}|${{ env.ADMIN_API_PORT }})' || echo '✅ 所有目标端口已释放'
          
          # 清理未使用的镜像和资源
          sudo docker system prune -a -f
          echo '✅ Docker 资源清理完成'
          
          # 显示清理后的资源使用情况
          echo '📊 清理后的 Docker 资源:'
          sudo docker system df || true
        "

    - name: "⚙️ 生成并传输配置文件"
      run: |
        echo "⚙️ 生成生产环境配置文件..."
        
        # 直接从secrets创建配置文件
        cat > config.yaml << 'EOF'
        ${{ secrets.CONFIG }}
        EOF
        
        # 替换配置文件中的内网IP变量
        sed -i 's/{{SYSTEM_INTERNAL_IP}}/${{ env.AWS_INTERNAL_IP }}/g' config.yaml
        
        # 验证配置文件生成
        echo "🔍 验证配置文件..."
        if [ -f config.yaml ] && [ -s config.yaml ]; then
          echo "✅ 配置文件生成成功 ($(wc -c < config.yaml) bytes)"
        else
          echo "❌ 配置文件生成失败"
          exit 1
        fi
        
        # 传输配置文件到远程服务器
        echo "📤 传输配置文件..."
        scp -o StrictHostKeyChecking=no config.yaml ubuntu@${{ env.AWS_INSTANCE_IP }}:${{ env.TEMP_BASE_DIR }}/${{ env.APP_TEMP_DIR }}/config.yaml
        
        # 验证传输
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "
          if [ -f ${{ env.TEMP_BASE_DIR }}/${{ env.APP_TEMP_DIR }}/config.yaml ]; then
            echo '✅ 配置文件传输成功'
            ls -lh ${{ env.TEMP_BASE_DIR }}/${{ env.APP_TEMP_DIR }}/config.yaml
          else
            echo '❌ 配置文件传输失败'
            exit 1
          fi
        "

    - name: ⬇️ 拉取最新 Docker 镜像
      run: |
        echo "⬇️ 拉取最新的 Docker 镜像..."
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "
          # 显示拉取前的镜像列表
          echo '📦 拉取前的镜像列表:'
          sudo docker images | grep '${{ env.IMG_NAME }}' || echo '没有找到相关镜像'
          
          # 拉取最新镜像
          echo '⬇️ 开始拉取镜像: ${{ env.REGISTRY }}/${{ env.IMG_NAME }}:${{ env.IMG_VERSION }}'
          sudo docker pull ${{ env.REGISTRY }}/${{ env.IMG_NAME }}:${{ env.IMG_VERSION }}
          
          # 验证镜像拉取成功
          echo '✅ 镜像拉取完成，当前镜像列表:'
          sudo docker images | grep '${{ env.IMG_NAME }}'
        "

    - name: 🚀 部署应用容器
      run: |
        echo "🚀 启动新的生产应用容器..."
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "
          # 最后一次检查端口状态
          echo '🔍 最后检查端口状态:'
          if sudo netstat -tlnp | grep -E ':(${{ env.OPENAPI_PORT }}|${{ env.CASHIER_API_PORT }}|${{ env.MERCHANT_API_PORT }}|${{ env.CASHIER_ADMIN_API_PORT }}|${{ env.ADMIN_API_PORT }})'; then
            echo '⚠️ 端口仍被占用，尝试强制清理...'
            sudo fuser -k ${{ env.OPENAPI_PORT }}/tcp 2>/dev/null || true
            sudo fuser -k ${{ env.CASHIER_API_PORT }}/tcp 2>/dev/null || true
            sudo fuser -k ${{ env.MERCHANT_API_PORT }}/tcp 2>/dev/null || true
            sudo fuser -k ${{ env.CASHIER_ADMIN_API_PORT }}/tcp 2>/dev/null || true
            sudo fuser -k ${{ env.ADMIN_API_PORT }}/tcp 2>/dev/null || true
            sleep 5
          fi
          
          # 确保没有同名容器存在
          if sudo docker ps -a --format '{{.Names}}' | grep -q '^${{ env.SERVICE_NAME }}\$'; then
            echo '⚠️ 发现同名容器，强制删除...'
            sudo docker rm -f ${{ env.SERVICE_NAME }}
            sleep 2
          fi
          
          # 启动新容器
          echo '🚀 启动生产容器: ${{ env.SERVICE_NAME }}'
          sudo docker run -d \
            --name ${{ env.SERVICE_NAME }} \
            --restart unless-stopped \
            -p ${{ env.OPENAPI_PORT }}:${{ env.OPENAPI_PORT }} \
            -p ${{ env.CASHIER_API_PORT }}:${{ env.CASHIER_API_PORT }} \
            -p ${{ env.MERCHANT_API_PORT }}:${{ env.MERCHANT_API_PORT }} \
            -p ${{ env.CASHIER_ADMIN_API_PORT }}:${{ env.CASHIER_ADMIN_API_PORT }} \
            -p ${{ env.ADMIN_API_PORT }}:${{ env.ADMIN_API_PORT }} \
            -v '${{ env.TEMP_BASE_DIR }}/${{ env.APP_TEMP_DIR }}/config.yaml:/app/config.yaml' \
            -v '${{ env.LOGS_DIR }}/${{ env.APP_TEMP_DIR }}:/logs' \
            ${{ env.REGISTRY }}/${{ env.IMG_NAME }}:${{ env.IMG_VERSION }}
          
          echo '✅ 生产容器启动命令已执行'
          
          # 验证容器是否成功启动
          sleep 3
          if sudo docker ps --format '{{.Names}}' | grep -q '^${{ env.SERVICE_NAME }}\$'; then
            echo '✅ 生产容器启动成功'
          else
            echo '❌ 生产容器启动失败，检查日志...'
            sudo docker logs ${{ env.SERVICE_NAME }} 2>/dev/null || echo '无法获取日志'
            exit 1
          fi
        "

    - name: 🔍 验证容器状态
      run: |
        echo "🔍 验证生产容器运行状态..."
        
        # 等待容器启动
        sleep 10
        
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "
          # 检查容器状态
          CONTAINER_STATUS=\$(sudo docker inspect --format='{{.State.Status}}' ${{ env.SERVICE_NAME }} 2>/dev/null || echo 'not_found')
          
          if [ \"\$CONTAINER_STATUS\" = \"running\" ]; then
            echo '✅ 生产容器正在运行'
            
            # 显示容器详细信息
            echo '📋 容器详细信息:'
            sudo docker ps --filter 'name=${{ env.SERVICE_NAME }}' --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.Image}}'
            
            # 显示容器资源使用情况
            echo '📊 容器资源使用情况:'
            sudo docker stats --no-stream --format 'table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}' ${{ env.SERVICE_NAME }}
            
            # 显示最近的容器日志
            echo '📝 容器启动日志（最近30行）:'
            sudo docker logs --tail 30 ${{ env.SERVICE_NAME }}
            
            # 检查应用健康状态
            echo '🏥 检查应用健康状态...'
            sleep 5
            if curl -f http://localhost:${{ env.OPENAPI_PORT }}/health 2>/dev/null; then
              echo '✅ 生产应用健康检查通过'
            else
              echo '⚠️ 生产应用健康检查失败，但容器正在运行'
            fi
            
          else
            echo '❌ 生产容器未在运行，状态: '\$CONTAINER_STATUS
            
            # 显示容器错误日志
            echo '📝 容器错误日志:'
            sudo docker logs ${{ env.SERVICE_NAME }} 2>/dev/null || echo '无法获取容器日志'
            
            # 显示系统资源情况
            echo '💾 系统资源情况:'
            free -h
            df -h
            
            exit 1
          fi
        "

    - name: 🧹 清理旧镜像
      run: |
        echo "🧹 清理旧版本镜像..."
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "
          # 保留当前版本，删除其他版本的镜像
          sudo docker images | grep '${{ env.IMG_NAME }}' | grep -v '${{ env.IMG_VERSION }}' | awk '{print \$3}' | xargs -r sudo docker rmi || echo '没有旧镜像需要清理'
          
          # 清理悬空镜像
          sudo docker image prune -f
          
          echo '✅ 镜像清理完成'
          echo '📦 当前镜像列表:'
          sudo docker images | grep '${{ env.IMG_NAME }}' || echo '没有相关镜像'
        "

    - name: 📊 部署总结
      run: |
        echo "📊 生产环境部署总结报告:"
        echo "=================================="
        echo "🚀 应用名称: ${{ env.SERVICE_NAME }}"
        echo "🏷️ 镜像版本: ${{ env.IMG_VERSION }}"
        echo "🌍 AWS 区域: ${{ env.AWS_REGION }}"
        echo "🖥️ 服务器 IP: ${{ env.AWS_INSTANCE_IP }}"
        echo "🌐 OpenAPI 端口: ${{ env.OPENAPI_PORT }}"
        echo "🛠️ CashierAPI 端口: ${{ env.CASHIER_API_PORT }}"
        echo "🏪 MerchantAPI 端口: ${{ env.MERCHANT_API_PORT }}"
        echo "👥 CashierAdminAPI 端口: ${{ env.CASHIER_ADMIN_API_PORT }}"
        echo "⚙️ AdminAPI 端口: ${{ env.ADMIN_API_PORT }}"
        echo "📁 日志目录: ${{ env.LOGS_DIR }}/${{ env.APP_TEMP_DIR }}"
        echo "⏰ 部署时间: $(date)"
        echo "=================================="
        echo "✅ AWS Prod 环境部署完成!"

    - name: 🧼 清理临时文件
      if: always()
      run: |
        echo "🧼 清理部署过程中的临时文件..."
        
        # 删除本地临时文件
        rm -f config.yaml
        echo "✅ 本地临时文件已清理"
        
        # 删除远程临时配置目录
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_INSTANCE_IP }} "
          sudo rm -rf ${{ env.TEMP_BASE_DIR }}/${{ env.APP_TEMP_DIR }}
          echo '✅ 远程临时目录已清理'
        " || echo "⚠️ 远程临时目录清理失败（可能已被清理）"
        
        echo "🎉 清理完成，生产环境部署流程结束!"